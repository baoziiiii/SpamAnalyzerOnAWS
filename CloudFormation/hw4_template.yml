AWSTemplateFormatVersion: 2010-09-09

Parameters:
  S3BucketName:
    Type: String
    Description: 3~63 characters. Consist only of lowercase letters, numbers, dots (.), and hyphens (-). Begin and end with a letter or number.
    MinLength: 3
    MaxLength: 63
  LambdaName:
    Type: String
  PredictionEndpointName:
    Type: String
    Description: 'Name(not arn) of sagemaker endpoint. Example: sms-spam-classifier-mxnet-2020-05-10-01-14-41-767'

Resources:
  hw4LF:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Ref LambdaName
      Code:
        ZipFile: |
          _J='receiver'
          _I='sender'
          _H='subject'
          _G='timestamp'
          _F='md5'
          _E='Body'
          _D='body'
          _C='s3'
          _B=True
          _A='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n'
          import json,boto3,re,base64,os,string,sys
          from hashlib import md5
          if sys.version_info<(3,):maketrans=string.maketrans
          else:maketrans=str.maketrans
          def vectorize_sequences(sequences,vocabulary_length):
            A=sequences;B=[[0 for A in range(vocabulary_length)]for B in range(len(A))]
            for (C,D) in enumerate(A):
              for E in D:B[C][E]=1
            return B
          def one_hot_encode(messages,vocabulary_length):
            A=[]
            for B in messages:C=one_hot(B,vocabulary_length);A.append(C)
            return A
          def text_to_word_sequence(text,filters=_A,lower=_B,split=' '):
            C=filters;B=split;A=text
            if lower:A=A.lower()
            if sys.version_info<(3,):
              if isinstance(A,unicode):D=dict(((ord(A),unicode(B))for A in C));A=A.translate(D)
              elif len(B)==1:D=maketrans(C,B*len(C));A=A.translate(D)
              else:
                for E in C:A=A.replace(E,B)
            else:F=dict(((A,B)for A in C));D=maketrans(F);A=A.translate(D)
            G=A.split(B);return[A for A in G if A]
          def one_hot(text,n,filters=_A,lower=_B,split=' '):return hashing_trick(text,n,hash_function=_F,filters=filters,lower=lower,split=split)
          def hashing_trick(text,n,hash_function=None,filters=_A,lower=_B,split=' '):
            A=hash_function
            if A is None:A=hash
            elif A==_F:A=lambda w:int(md5(w.encode()).hexdigest(),16)
            B=text_to_word_sequence(text,filters=filters,lower=lower,split=split);return[int(A(C)%(n-1)+1)for C in B]
          s3=boto3.client(_C)
          sgmaker=boto3.client('sagemaker-runtime')
          ses=boto3.client('ses')
          prediction_e1=os.environ['e1']
          def predict(emails):
            B=emails;C=9013;A=[]
            for E in range(len(B)):F=B[E][_D];A.append(F.replace('\n','').replace('\r',''))
            print('[sagemaker_inputs]{}'.format(A));D=sgmaker.invoke_endpoint(EndpointName=prediction_e1,Body=json.dumps(vectorize_sequences(one_hot_encode(A,C),C)),ContentType='application/json')[_E].read();print('[sagemaker_response]{}'.format(D));return json.loads(D)
          def reply_to_sender(emails,prediction):
            I='UTF-8';H='Data';G='Charset';B=prediction
            for (C,A) in enumerate(emails):J='SPAM'if B['predicted_label'][C][0]>0 else'HAM';K=B['predicted_probability'][C][0];L=A[_G];D=A[_H];E=f"<p>We received your email sent at {L} with the subject {D}.<br>\n        Here is a 240 character sample of the email body:<br> {A[_D]}<br>\n        The email was categorized as <b>{J}</b> with a {K}% confidence.</p><br>\n        ";F=A[_I];M=A[_J];N=ses.send_email(Destination={'BccAddresses':[],'CcAddresses':[],'ToAddresses':[F]},Message={_E:{'Html':{G:I,H:'<div dir="ltr">{}</div>'.format(E)},'Text':{G:I,H:E}},'Subject':{G:I,H:D}},ReplyToAddresses=[F],Source=M);print('ses_reponse:{}'.format(N))
          def get_emails(records):
            N='utf-8';E=[]
            for F in records:
              K=F[_C]['bucket']['name'];L=F[_C]['object']['key'];A=str(s3.get_object(Bucket=K,Key=L)[_E].read().decode(N));G=re.search('(?<=Return-Path: <)(.*?)(?=>)',A).group();H=re.search('(?<=for )(.*?)(?=;)',A).group();I=re.search('(?<=^Subject:)(.*?)(?=$)',A,re.MULTILINE).group();J=re.search('(?<=^)(.*?)(?=\\(UTC\\))',A,re.MULTILINE).group();print('[sender]{}'.format(G));print('[receiver]{}'.format(H));print('[subject]{}'.format(I));print('[timestamp]{}'.format(J));M='--'+re.search('(?<=boundary=\\")(.*?)(?=\\")',A).group();C=re.search('(?<={0})(.*?)(?={0})'.format(M),A,re.DOTALL).group()[2:];D=re.search('(?<=Content-Transfer-Encoding: )(.*?)(?=\\s)',C);B=C[C.index('\r\n\r\n'):]
              if D and D.group().strip().lower()=='base64':print('[encoding]{}'.format(D.group()));B=''.join([A for A in B.splitlines()if A]);B=base64.b64decode(B).decode(N)
              print('[body]\n{}'.format(B));E.append({_I:G,_J:H,_H:I,_D:B,_G:J})
            return E
          def lambda_handler(event,context):A=get_emails(event['Records']);reply_to_sender(A,predict(A))
      Handler: index.lambda_handler
      Role: !GetAtt 
        - H4LFRole
        - Arn
      Runtime: python3.7
      Environment:
        Variables:
          e1: !Ref PredictionEndpointName
      Timeout: 10
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 99dcd59b-09f6-495d-ad40-f36ec496b61b

  EmailS3:
    Type: 'AWS::S3::Bucket'
    DependsOn: LambdaInvokePermission
    Properties:
      BucketName: !Ref S3BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt 
              - hw4LF
              - Arn
    Metadata:
      'AWS::CloudFormation::Designer':
        id: d1363529-80a7-4f00-ae97-a370641dcb19
        
  LambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt 
        - hw4LF
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${S3BucketName}'
     
  ReceiptRuleSet:
    Type: 'AWS::SES::ReceiptRuleSet'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: be3c8bb4-6bc9-4bfc-8294-602074604da2
  
  ReceiptRule:
    Type: 'AWS::SES::ReceiptRule'
    Properties:
      RuleSetName: !Ref ReceiptRuleSet
      Rule:
        Enabled: true
        ScanEnabled: true
        Actions:
          - S3Action: 
                BucketName: !Ref EmailS3
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 2d202d17-4e01-4b3c-8978-70dd8c459e5a
  DNS:
    Type: 'AWS::Route53::HostedZone'
    Properties:
      HostedZoneConfig:
        Comment: My hosted zone for nyugroup.com
      Name: nyugroup.com
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 7d486094-c832-4d61-82ec-f4c503b011c8
  H4LFRole:
    Type: 'AWS::IAM::Role'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 7fd07170-1208-41f6-be4d-8adc96b72435
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSESFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  EmailS3Policy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal: '*'
          Action:
            - 's3:GetObject'
            - 's3:PutObject'
            - 's3:PutObjectAcl'
            - 's3:Get*'
            - 's3:List*'
          Resource: !Join 
            - ''
            - - 'arn:aws:s3:::'
              - !Ref EmailS3
              - /*
          # Condition: 
          #   StringEquals: 
          #     aws:Referer: '591736655990'
      Bucket: !Ref EmailS3

    Metadata:
      'AWS::CloudFormation::Designer':
        id: 7367f323-2dcc-4441-9811-c54443ba7914

Metadata:
  'AWS::CloudFormation::Designer':
    99dcd59b-09f6-495d-ad40-f36ec496b61b:
      size:
        width: 60
        height: 60
      position:
        x: -200
        'y': 200
      z: 0
      embeds: []
    d1363529-80a7-4f00-ae97-a370641dcb19:
      size:
        width: 60
        height: 60
      position:
        x: -10
        'y': 200
      z: 0
      embeds: []
    be3c8bb4-6bc9-4bfc-8294-602074604da2:
      size:
        width: 60
        height: 60
      position:
        x: -260
        'y': 330
      z: 0
      embeds: []
    2d202d17-4e01-4b3c-8978-70dd8c459e5a:
      size:
        width: 60
        height: 60
      position:
        x: -110
        'y': 330
      z: 0
      embeds: []
    7d486094-c832-4d61-82ec-f4c503b011c8:
      size:
        width: 140
        height: 140
      position:
        x: -580
        'y': 240
      z: 0
      embeds: []
    7fd07170-1208-41f6-be4d-8adc96b72435:
      size:
        width: 60
        height: 60
      position:
        x: -370
        'y': 250
      z: 0
      embeds: []
    7367f323-2dcc-4441-9811-c54443ba7914:
      size:
        width: 60
        height: 60
      position:
        x: -10
        'y': 330
      z: 0
      embeds: []
      isassociatedwith:
        - d1363529-80a7-4f00-ae97-a370641dcb19